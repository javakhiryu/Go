//Атомарный счетчик: Используется атомарный счетчик ops типа atomic.Uint64 для безопасного инкремента в условиях конкурентного выполнения.

//WaitGroup: Используется sync.WaitGroup для ожидания завершения всех 50 горутин.

//Ожидание завершения: wg.Wait() блокирует выполнение до тех пор, пока все горутины не завершат свою работу.

package main

import (
	"fmt"
	"sync"
	"sync/atomic"
)

func main() {
	// Определяем атомарный счетчик
	var ac atomic.Int64

	// Используем WaitGroup для ожидания завершения всех горутин
	var wg sync.WaitGroup

	// Запускаем 50 горутин
	for i := 0; i < 50; i++ {
		wg.Add(1)

		go func() {
			for i := 0; i < 1000; i++ {
				ac.Add(1)
			}
			wg.Done()
		}()
	}
	// Ожидаем завершения всех горутин
	wg.Wait()

	// Выводим итоговое значение счетчика
	fmt.Println("ac: ", ac.Load())
}
