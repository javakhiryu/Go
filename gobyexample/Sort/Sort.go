//Ваш код демонстрирует использование функций из пакета slices для сортировки срезов и проверки их упорядоченности в Go. Пакет slices был введен в Go 1.18 и предоставляет удобные функции для работы со срезами.

package main

import (
	"fmt"
	"slices"
)

func main() {
	// Создаем срез строк и сортируем его
	strs := []string{"b", "c", "a"}
	slices.Sort(strs) // Сортируем строки в алфавитном порядке
	fmt.Println(strs) // Выводим отсортированный срез: ["a", "b", "c"]

	// Создаем срез целых чисел и сортируем его
	ints := []int{3, 2, 1}
	slices.Sort(ints) // Сортируем числа в порядке возрастания
	fmt.Println(ints) // Выводим отсортированный срез: [1, 2, 3]

	// Проверяем, отсортирован ли срез целых чисел
	fmt.Println(slices.IsSorted(ints)) // Выводит true, так как срез отсортирован
}

//В Go 1.18 и выше, пакет slices включает функции для работы с срезами. Вот что вы можете делать с этим пакетом:

//slices.Sort(slice) – Сортирует срез в порядке возрастания для элементов с поддержкой сравнения.
//slices.IsSorted(slice) – Проверяет, отсортирован ли срез в порядке возрастания.
//slices.SortFunc(slice, less func(x, y T) bool) – Сортирует срез с использованием пользовательской функции сравнения.
//slices.Search(slice, x T) int – Ищет элемент в отсортированном срезе.
