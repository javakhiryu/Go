//Ваш код демонстрирует, как создавать, записывать и закрывать файл с использованием функции defer для гарантированного закрытия файла после завершения всех операций.
//defer используется для отложенного выполнения функции closeFile, что гарантирует закрытие файла даже в случае ошибки при записи.

package main

import (
	"fmt"
	"os"
)

func main() {
	// Создаем файл
	f := createFile("C:\\Users\\Asus\\Desktop\\Go\\defer.text")
	// Откладываем закрытие файла до завершения main
	defer closeFile(f)
	// Записываем данные в файл
	writeFile(f)
}

// Функция для создания файла
func createFile(path string) *os.File {
	fmt.Println("Creating")
	f, err := os.Create(path)
	if err != nil {
		panic(err) // Останавливаем программу в случае ошибки
	}
	return f
}

// Функция для записи данных в файл
func writeFile(f *os.File) {
	fmt.Println("Writing")
	fmt.Fprintln(f, "data")
}

// Функция для закрытия файла
func closeFile(f *os.File) {
	fmt.Println("Closing")
	err := f.Close()

	if err != nil {
		// Обработка ошибки при закрытии файла
		fmt.Fprintf(os.Stderr, "error: %v\n", err)
		os.Exit(1)
	}
}

//Объяснение:
//
//Создание файла: Функция createFile создает файл по заданному пути и возвращает указатель на os.File. Если происходит ошибка, программа останавливается с помощью panic.
//Запись в файл: Функция writeFile записывает строку "data" в файл.
//Закрытие файла: Функция closeFile закрывает файл и обрабатывает возможные ошибки при закрытии, выводя сообщение об ошибке и завершая программу с ненулевым кодом выхода.
//Отложенное закрытие файла: В main используется defer для вызова closeFile после завершения всех операций с файлом. Это гарантирует, что файл будет закрыт, даже если произойдет ошибка во время записи.
//Использование defer для закрытия ресурсов, та
