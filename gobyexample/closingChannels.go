//Ваш код демонстрирует использование каналов для передачи задач между горутинами и синхронизацию их выполнения.
//Ваша программа создает канал jobs для передачи задач и канал done для сигнализации о завершении работы.

package main

import "fmt"

func main() {
	jobs := make(chan int, 5) // Создаем канал jobs с буфером размером 5
	done := make(chan bool)   //// Создаем канал done для сигнализации о завершении работы

	// Горутина для получения и обработки задач
	go func() {
		for {
			j, more := <-jobs
			if more {
				fmt.Println("received job", j) // Получена задача
			} else {
				fmt.Println("received all job") // Все задачи получены
				done <- true                    // Сигнализируем о завершении работы
				return
			}
		}
	}()

	// Отправляем 3 задачи в канал jobs
	for j := 1; j <= 3; j++ {
		jobs <- j
		fmt.Println("sent job", j)
	}
	close(jobs) // Закрываем канал jobs, чтобы сигнализировать о завершении отправки задачv
	fmt.Println("sent all jobs")

	<-done // Ожидаем завершения работы горутины

	_, ok := <-jobs
	fmt.Println("received more jobs:", ok) // Проверка состояния канала jobs после его закрытия
}

//Объяснение:

//Создание каналов: Создается канал jobs с буфером размером 5 для передачи задач и канал done для сигнализации о завершении работы.

//Горутина для обработки задач: Горутина получает задачи из канала jobs. Если канал открыт и содержит данные, задача обрабатывается (выводится на экран).
//Если канал закрыт и все данные прочитаны, горутина сигнализирует о завершении работы, отправляя true в канал done, и завершает работу.

//Отправка задач: В главной функции отправляются 3 задачи в канал jobs.
//После отправки всех задач канал jobs закрывается с помощью close(jobs), сигнализируя о том, что больше задач не будет.

//Ожидание завершения: Главная функция ожидает сигнал от горутины о завершении работы, считывая значение из канала done.

//Проверка состояния канала: После завершения работы проверяется состояние канала jobs для демонстрации того,
//что после закрытия канала из него больше нельзя получать значения (что выводит false).

//Этот пример показывает, как можно использовать каналы для координации и синхронизации работы между горутинами в Go.
