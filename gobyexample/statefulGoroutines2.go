
Этот пример демонстрирует использование мьютекса (sync.Mutex) для обеспечения безопасного доступа к общей переменной (Counter.Count) из нескольких горутин. Мьютекс используется для блокировки и разблокировки доступа к переменной, чтобы избежать состояния гонки, когда несколько горутин пытаются изменить значение одновременно.

package main

import (
	"fmt"
	"sync"
)

// Counter представляет счетчик с мьютексом для синхронизации доступа
type Counter struct {
	mu    sync.Mutex // Мьютекс для синхронизации доступа к счетчику
	Count int        // Счетчик
}

// increment увеличивает значение счетчика на 1000, используя мьютекс для синхронизации
func increment(c *Counter, wg *sync.WaitGroup) {
	defer wg.Done() // Уменьшаем счетчик группы ожидания после завершения горутины

	for i := 0; i < 1000; i++ {
		c.mu.Lock()   // Блокируем доступ к счетчику
		c.Count++     // Увеличиваем значение счетчика
		c.mu.Unlock() // Разблокируем доступ к счетчику
	}
}

func main() {
	var wg sync.WaitGroup // Группа ожидания для синхронизации завершения всех горутин
	counter := Counter{}  // Инициализируем счетчик

	for i := 0; i < 10; i++ { // Запускаем 10 горутин
		wg.Add(1) // Увеличиваем счетчик группы ожидания перед запуском каждой горутины
		go increment(&counter, &wg)
	}

	wg.Wait() // Ожидаем завершения всех горутин

	fmt.Println("Final Count:", counter.Count) // Выводим итоговое значение счетчика
}

//Этот пример показывает, как использовать мьютекс для защиты общей переменной от одновременного доступа из нескольких горутин и как использовать группу ожидания для синхронизации выполнения горутин.