//Ваш код демонстрирует использование мьютекса для защиты общего состояния (счетчиков) при выполнении конкурентных инкрементов из нескольких горутин. Вы используете sync.WaitGroup для ожидания завершения всех горутин перед выводом результата.

package main

import (
	"fmt"
	"sync"
)

// Container содержит мьютекс и карту счетчиков
type Container struct {
	mu       sync.Mutex
	counters map[string]int
}

// Метод inc увеличивает значение счетчика по ключу name, защищая доступ с помощью мьютекса
func (c *Container) inc(name string) {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.counters[name]++
}

func main() {
	var wg sync.WaitGroup

	// Инициализация контейнера с начальным значением счетчиков
	c := Container{counters: map[string]int{"a": 0, "b": 0}}

	// Функция doIncrement увеличивает счетчик по ключу name n раз
	doIncrement := func(name string, n int) {
		for i := 0; i < n; i++ {
			c.inc(name)
		}
		wg.Done()
	}

	// Добавляем 3 задания в WaitGroup
	wg.Add(3)
	go doIncrement("a", 1000) // Инкрементируем счетчик "a" 1000 раз
	go doIncrement("b", 1000) // Инкрементируем счетчик "b" 1000 раз
	go doIncrement("b", 1000) // Инкрементируем счетчик "b" еще 1000 раз

	// Ожидаем завершения всех горутин
	wg.Wait()

	// Выводим итоговые значения счетчиков
	fmt.Println(c.counters)
}

//Объяснение:
//
//Структура Container: Эта структура содержит мьютекс (mu) для синхронизации доступа к карте счетчиков (counters).
//Метод inc: Метод inc увеличивает значение счетчика по ключу name. Доступ к карте счетчиков защищен мьютексом. defer c.mu.Unlock() гарантирует, что мьютекс будет разблокирован после выполнения инкремента, даже если возникнет ошибка.
//Функция doIncrement: Эта функция вызывает метод inc для указанного ключа n раз и затем вызывает wg.Done(), чтобы сигнализировать об окончании своей работы.
//Создание и запуск горутин: В главной функции три горутины запускаются для инкрементации счетчиков. Две из них инкрементируют счетчик "b", что приводит к 2000 инкрементам для "b".
//Ожидание завершения горутин: wg.Wait() блокирует выполнение основного потока до завершения всех горутин.
//Вывод результатов: Итоговые значения счетчиков выводятся на экран.
//
//Этот пример показывает, как использовать мьютексы и WaitGroup для управления конкурентным доступом к общим данным в многопоточном приложении.
