package main

import (
	"fmt"
	"sync"
	"time"
)

// worker - функция, которая имитирует выполнение работы в горутине.
func worker(id int) {
	fmt.Printf("Gourutine with %d started working\n", id)
	time.Sleep(time.Second) // Симуляция работы путем ожидания в течение 1 секунды.
	fmt.Printf("Gourutine with %d ended working\n", id)
}

func main() {
	var wg sync.WaitGroup // Создание группы ожидания.

	for i := 1; i < 6; i++ {
		wg.Add(1) // Увеличение счетчика группы ожидания перед запуском новой горутины.
		// Запуск новой горутины.
		go func(id int) {
			defer wg.Done() // Уменьшение счетчика группы ожидания после завершения горутины.
			worker(id)
		}(i)
	}
	wg.Wait() // Ожидание завершения всех горутин.
}

//Функция worker:
//
//Эта функция принимает идентификатор горутины и выводит сообщения о начале и окончании работы.
//Для симуляции выполнения работы используется time.Sleep(time.Second).
//
//Функция main:
//
//Создается переменная wg типа sync.WaitGroup для управления группой ожидания.
//В цикле запускаются пять горутин. Перед запуском каждой горутины счетчик группы ожидания увеличивается на 1 (wg.Add(1)).
//Каждая горутина выполняет функцию worker, а после завершения работы уменьшает счетчик группы ожидания на 1 с помощью defer wg.Done().
//Основная горутина (main) ждет завершения всех рабочих горутин с помощью wg.Wait().

//Этот код показывает, как можно использовать sync.WaitGroup для ожидания завершения всех запущенных горутин. Это полезно в ситуациях, когда необходимо убедиться, что все горутины завершили свою работу перед продолжением выполнения основной программы или завершением работы приложения.
