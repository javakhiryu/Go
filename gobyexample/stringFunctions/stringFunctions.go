// Этот пример демонстрирует использование различных функций из пакета strings в Go для работы со строками. Пакет strings предоставляет множество полезных функций для манипуляции строками, таких как проверка наличия подстроки, подсчет вхождений, проверка префиксов и суффиксов, замена символов, разбиение строки и изменение регистра.
package main

import (
	"fmt"
	s "strings"
)

// p - сокращение для fmt.Println для удобства
var p = fmt.Println

func main() {
	p("Contains: ", s.Contains("test", "es"))      // Проверяет, содержит ли строка подстроку "es"
	p("Count: ", s.Count("test", "t"))             // Подсчитывает количество вхождений символа "t"
	p("HasPrefix: ", s.HasPrefix("test", "te"))    // Проверяет, начинается ли строка с префикса "te"
	p("HasSuffix: ", s.HasSuffix("test", "st"))    // Проверяет, заканчивается ли строка суффиксом "st"
	p("Index: ", s.Index("test", "e"))             // Возвращает индекс первого вхождения подстроки "e"
	p("Join: ", s.Join([]string{"a", "b"}, "-"))   // Объединяет элементы слайса в строку с разделителем "-"
	p("Repeat: ", s.Repeat("a", 5))                // Повторяет строку "a" 5 раз
	p("Replace: ", s.Replace("foo", "o", "0", -1)) // Заменяет все вхождения "o" на "0"
	p("Replace: ", s.Replace("foo", "o", "0", 1))  // Заменяет первое вхождение "o" на "0"
	p("Split: ", s.Split("a-b-c-d-e-f", "-"))      // Разделяет строку на слайс строк по разделителю "-"
	p("ToLower: ", s.ToLower("TEST"))              // Преобразует строку в нижний регистр
	p("ToUpper: ", s.ToUpper("test"))              // Преобразует строку в верхний регистр
}

//Эти функции из пакета strings являются мощными инструментами для работы со строками в Go. Они облегчают задачи, связанные с проверкой наличия подстрок, манипуляцией строками, изменением регистра и многим другим, что делает их полезными для широкого спектра задач
