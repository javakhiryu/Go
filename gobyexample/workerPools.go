// Этот код демонстрирует реализацию пула воркеров (workers) для параллельной обработки задач. В данном примере три воркера (worker) выполняют пять заданий (jobs), а результаты этих заданий записываются в канал results.
package main

import (
	"fmt"
	"time"
)

// worker - функция, которая будет выполняться воркерами. Она принимает идентификатор воркера,
// канал jobs для получения заданий и канал results для отправки результатов.
func worker(id int, jobs <-chan int, results chan<- int) {
	for j := range jobs {
		// Получение задания из канала jobs.
		fmt.Println("worker", id, "started job", j)
		time.Sleep(time.Second) // Симуляция работы путем ожидания в течение 1 секунды.
		fmt.Println("worker", id, "finished job", j)
		// Отправка результата выполнения задания в канал results.
		results <- j * 2
	}
}

func main() {
	const numJobs = 5
	jobs := make(chan int, numJobs)    // Создание буферизированного канала для заданий.
	results := make(chan int, numJobs) // Создание буферизированного канала для результатов.

	// Запуск 3 воркеров.
	for w := 1; w <= 3; w++ {
		go worker(w, jobs, results)
	}

	// Отправка 5 заданий в канал jobs.
	for j := 1; j <= numJobs; j++ {
		jobs <- j
	}
	close(jobs) // Закрытие канала jobs, чтобы сигнализировать воркерам об окончании заданий.

	// Получение результатов выполнения всех заданий из канала results.
	for a := 1; a <= numJobs; a++ {
		<-results
	}
}

//Когда этот код выполняется, воркеры параллельно обрабатывают задания, что ускоряет выполнение по сравнению с последовательной обработкой. Каналы используются для передачи заданий воркерам и получения результатов их работы. Закрытие канала jobs после отправки всех заданий позволяет воркерам корректно завершить свою работу после обработки всех заданий.
