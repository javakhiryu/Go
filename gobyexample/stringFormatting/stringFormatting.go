//Этот пример демонстрирует различные способы форматирования и вывода данных с помощью функции fmt.Printf и связанных функций в языке Go. Форматирование и вывод данных являются важными аспектами при написании программ, так как позволяют представить данные в 

package main

import (
	"fmt"
	"os"
)

type point struct {
	x, y int
}

func main() {
	p := point{1, 2}

	// Вывод структуры point
	fmt.Printf("%v\n", p)        // Выводит значения полей структуры
	fmt.Printf("%+v\n", p)       // Выводит поля структуры вместе с именами
	fmt.Printf("%#v\n", p)       // Выводит Go-выражение, которое создало бы такую же структуру
	fmt.Printf("%T\n", p)        // Выводит тип значения
	fmt.Printf("%t\n", true)     // Выводит значение булевского типа
	fmt.Printf("%d\n", 123)      // Выводит целое число в десятичном формате
	fmt.Printf("%b\n", 14)       // Выводит целое число в двоичном формате
	fmt.Printf("%c\n", 33)       // Выводит символ, соответствующий целому числу
	fmt.Printf("%x\n", 456)      // Выводит число в шестнадцатеричном формате
	fmt.Printf("%f\n", 78.9)     // Выводит число с плавающей запятой
	fmt.Printf("%e\n", 123400000.0) // Выводит число в научной нотации (маленькая e)
	fmt.Printf("%E\n", 123400000.0) // Выводит число в научной нотации (большая E)
	fmt.Printf("%s\n", "\"string\"") // Выводит строку
	fmt.Printf("%q\n", "\"string\"") // Выводит строку в кавычках
	fmt.Printf("%x\n", "hex this")  // Выводит строку в шестнадцатеричном формате
	fmt.Printf("%p\n", &p)          // Выводит указатель на значение

	// Форматирование вывода с шириной поля и точностью
	fmt.Printf("|%6d|%6d|\n", 12, 345) // Выводит целые числа с шириной поля 6
	fmt.Printf("|%6.2f|%6.2f|\n", 1.2, 3.45) // Выводит числа с плавающей запятой с шириной поля 6 и точностью 2
	fmt.Printf("|%-6.2f|%-6.2f|\n", 1.2, 3.45) // То же самое, но выравнивание по левому краю
	fmt.Printf("|%6s|%6s|\n", "foo", "b") // Выводит строки с шириной поля 6
	fmt.Printf("|%-6s|%-6s|\n", "foo", "b") // То же самое, но выравнивание по левому краю

	// Использование Sprintf для форматирования строки без вывода на экран
	s := fmt.Sprintf("sprintf: a %s", "string")
	fmt.Println(s)

	// Вывод строки в поток стандартной ошибки
	fmt.Fprintf(os.Stderr, "%s\n", "error")
}

//Этот пример охватывает множество различных способов форматирования данных в Go и может служить полезной шпаргалкой для программистов.